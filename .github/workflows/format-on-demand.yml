name: Opt-in Formatting

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: PR number to format
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  by_comment:
    name: Run on /format comment
    if: >-
      ${{ github.event_name == 'issue_comment' &&
          github.event.action == 'created' &&
          github.event.issue.pull_request &&
          (contains(github.event.comment.body, '/format') || contains(github.event.comment.body, '/autofix') || contains(github.event.comment.body, '/lint-fix')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR metadata and authorize request
        id: meta
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.payload.issue.number;
            const pr = (await github.rest.pulls.get({ ...context.repo, pull_number: prNumber })).data;
            const commenter = context.payload.comment.user.login;
            const prAuthor = pr.user.login;
            const assoc = context.payload.comment.author_association; // OWNER, MEMBER, COLLABORATOR, CONTRIBUTOR, etc.

            const isMaintainer = ['OWNER','MEMBER','COLLABORATOR'].includes(assoc);
            const isAuthor = commenter === prAuthor;
            const allowed = isMaintainer || isAuthor;

            core.setOutput('allowed', String(allowed));
            core.setOutput('pr', String(prNumber));
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_repo', pr.head.repo.full_name);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('same_repo', String(pr.head.repo.full_name === `${context.repo.owner}/${context.repo.repo}`));

      - name: Exit if not authorized
        if: ${{ steps.meta.outputs.allowed != 'true' }}
        run: |
          echo "Commenter is not authorized to trigger formatting." 1>&2
          exit 1

      - name: Checkout PR branch (same-repo)
        if: ${{ steps.meta.outputs.same_repo == 'true' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.meta.outputs.head_ref }}
          fetch-depth: 0

      - name: Checkout PR fork head
        if: ${{ steps.meta.outputs.same_repo != 'true' }}
        uses: actions/checkout@v5
        with:
          repository: ${{ steps.meta.outputs.head_repo }}
          ref: ${{ steps.meta.outputs.head_ref }}
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      - name: Restore .NET tools
        run: dotnet tool restore

      - name: Apply Prettier fixes
        run: |
          npx --yes prettier@3.3.3 --write "**/*.{md,markdown}"
          npx --yes prettier@3.3.3 --write "**/*.{json,asmdef,asmref}"
          npx --yes prettier@3.3.3 --write "**/*.{yml,yaml}"

      - name: Apply markdownlint fixes
        run: |
          npx --yes markdownlint-cli@0.40.0 "**/*.md" "**/*.markdown" --config .markdownlint.json --ignore-path .markdownlintignore --fix

      - name: Apply CSharpier formatting
        run: dotnet tool run csharpier format

      - name: Detect changes
        id: changes
        shell: bash
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes to PR branch (same-repo)
        if: ${{ steps.meta.outputs.same_repo == 'true' && steps.changes.outputs.has_changes == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: "chore(format): apply requested formatting"
          branch: ${{ steps.meta.outputs.head_ref }}
          file_pattern: |
            **/*.cs
            **/*.md
            **/*.markdown
            **/*.json
            **/*.asmdef
            **/*.asmref

      - name: Create bot branch and PR (fork)
        if: ${{ steps.meta.outputs.same_repo != 'true' && steps.changes.outputs.has_changes == 'true' }}
        shell: bash
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="bot/format/pr-${{ steps.meta.outputs.pr }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B "$BRANCH"
          # Stage only supported text files; avoid workflows to prevent permission issues
          git add '**/*.cs' '**/*.md' '**/*.markdown' '**/*.json' '**/*.asmdef' '**/*.asmref'
          git commit -m "chore(format): apply requested formatting for PR #${{ steps.meta.outputs.pr }}"
          git remote add upstream "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git fetch upstream
          git push upstream "$BRANCH" --force

      - name: Open/Update formatting PR (fork)
        if: ${{ steps.meta.outputs.same_repo != 'true' && steps.changes.outputs.has_changes == 'true' }}
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = Number(core.getInput('pr')) || Number('${{ steps.meta.outputs.pr }}');
            const baseRef = '${{ steps.meta.outputs.base_ref }}';
            const headBranch = `bot/format/pr-${prNumber}`;
            const {owner, repo} = context.repo;
            const title = `chore(format): Apply formatting to PR #${prNumber}`;
            const body = [
              `This automated PR applies Prettier/markdownlint/CSharpier formatting to the changes from PR #${prNumber}.`,
              '',
              `- Source PR (fork): #${prNumber}`,
              `- Target branch: ${baseRef}`,
            ].join('\n');
            const existing = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${headBranch}` });
            if (existing.data.length === 0) {
              await github.rest.pulls.create({ owner, repo, head: headBranch, base: baseRef, title, body });
            }

      - name: Comment result on PR
        if: ${{ steps.changes.outputs.has_changes == 'true' }}
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = Number('${{ steps.meta.outputs.pr }}');
            const sameRepo = '${{ steps.meta.outputs.same_repo }}' === 'true';
            const body = sameRepo
              ? 'Applied formatting as requested and pushed commits to this PR branch.'
              : 'Opened a formatting PR against the base repository with requested fixes.';
            await github.rest.issues.createComment({ ...context.repo, issue_number: prNumber, body });

      - name: No-op comment (nothing to change)
        if: ${{ steps.changes.outputs.has_changes != 'true' }}
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = Number('${{ steps.meta.outputs.pr }}');
            const body = 'No formatting changes were necessary.';
            await github.rest.issues.createComment({ ...context.repo, issue_number: prNumber, body });

  by_dispatch:
    name: Run via manual dispatch
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR metadata
        id: meta
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = Number(core.getInput('pr_number'));
            if (!prNumber) core.setFailed('pr_number is required');
            const pr = (await github.rest.pulls.get({ ...context.repo, pull_number: prNumber })).data;
            core.setOutput('pr', String(prNumber));
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_repo', pr.head.repo.full_name);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('same_repo', String(pr.head.repo.full_name === `${context.repo.owner}/${context.repo.repo}`));

      - name: Checkout PR branch (same-repo)
        if: ${{ steps.meta.outputs.same_repo == 'true' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.meta.outputs.head_ref }}
          fetch-depth: 0

      - name: Checkout PR fork head
        if: ${{ steps.meta.outputs.same_repo != 'true' }}
        uses: actions/checkout@v5
        with:
          repository: ${{ steps.meta.outputs.head_repo }}
          ref: ${{ steps.meta.outputs.head_ref }}
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      - name: Restore .NET tools
        run: dotnet tool restore

      - name: Apply Prettier fixes
        run: |
          npx --yes prettier@3.3.3 --write "**/*.{md,markdown}"
          npx --yes prettier@3.3.3 --write "**/*.{json,asmdef,asmref}"
          npx --yes prettier@3.3.3 --write "**/*.{yml,yaml}"

      - name: Apply markdownlint fixes
        run: |
          npx --yes markdownlint-cli@0.40.0 "**/*.md" "**/*.markdown" --config .markdownlint.json --ignore-path .markdownlintignore --fix

      - name: Apply CSharpier formatting
        run: dotnet tool run csharpier format

      - name: Detect changes
        id: changes
        shell: bash
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes to PR branch (same-repo)
        if: ${{ steps.meta.outputs.same_repo == 'true' && steps.changes.outputs.has_changes == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: "chore(format): apply requested formatting"
          branch: ${{ steps.meta.outputs.head_ref }}
          file_pattern: |
            **/*.cs
            **/*.md
            **/*.markdown
            **/*.json
            **/*.asmdef
            **/*.asmref

      - name: Create bot branch and PR (fork)
        if: ${{ steps.meta.outputs.same_repo != 'true' && steps.changes.outputs.has_changes == 'true' }}
        shell: bash
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="bot/format/pr-${{ steps.meta.outputs.pr }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B "$BRANCH"
          # Stage only supported text files; avoid workflows to prevent permission issues
          git add '**/*.cs' '**/*.md' '**/*.markdown' '**/*.json' '**/*.asmdef' '**/*.asmref'
          git commit -m "chore(format): apply requested formatting for PR #${{ steps.meta.outputs.pr }}"
          git remote add upstream "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git fetch upstream
          git push upstream "$BRANCH" --force

      - name: Open/Update formatting PR (fork)
        if: ${{ steps.meta.outputs.same_repo != 'true' && steps.changes.outputs.has_changes == 'true' }}
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = Number('${{ steps.meta.outputs.pr }}');
            const baseRef = '${{ steps.meta.outputs.base_ref }}';
            const headBranch = `bot/format/pr-${prNumber}`;
            const {owner, repo} = context.repo;
            const title = `chore(format): Apply formatting to PR #${prNumber}`;
            const body = [
              `This automated PR applies Prettier/markdownlint/CSharpier formatting to the changes from PR #${prNumber}.`,
              '',
              `- Source PR (fork): #${prNumber}`,
              `- Target branch: ${baseRef}`,
            ].join('\n');
            const existing = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${headBranch}` });
            if (existing.data.length === 0) {
              await github.rest.pulls.create({ owner, repo, head: headBranch, base: baseRef, title, body });
            }

